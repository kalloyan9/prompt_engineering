Question,Model Answer 1,Model Answer 2,Model Answer 3,Model Answer 4,Model Answer 5,Student Answer,Human Grade
"What is a pointer?","A variable that stores the memory address of another variable.","Enables dynamic memory allocation and deallocation.","Allows for efficient array and structure manipulation.","Facilitates the implementation of data structures like linked lists.","Supports function arguments to be passed by reference.","A pointer holds memory info",4
"What is the difference between struct and class in C++?","By default, members of a struct are public, whereas in a class, they are private.","Both can have member functions and constructors/destructors.","struct is traditionally used for passive objects with public access.","class is preferred for encapsulating data and functions with access control.","In modern C++, struct and class are functionally similar, differing mainly in default access specifiers.","Difference is only in the accessibility",7
"What is the purpose of the virtual keyword in C++?","Enables runtime polymorphism by allowing function overriding.","Ensures the correct function is called for an object, regardless of the pointer type.","Allows derived classes to provide specific implementations of base class functions.","Facilitates the use of dynamic binding.","Essential for implementing abstract classes and interfaces.","To have different functions",1
"What is a reference in C++?","An alias for another variable.","Must be initialized when declared.","Cannot be null, unlike pointers.","Provides a way to pass variables to functions without copying.","Simplifies syntax compared to pointers.","I don’t know",0
"What is the difference between new and malloc() in C++?","new is a C++ operator, while malloc() is a C function.","new calls constructors; malloc() does not.","new returns the correct type; malloc() returns void*.","new throws an exception on failure; malloc() returns NULL.","new should be paired with delete; malloc() with free().","new is a C++ operator, while malloc() is a C function.",9
"What is function overloading in C++?","Defining multiple functions with the same name but different parameters.","Allows functions to handle different types or numbers of arguments.","Enhances code readability and reusability.","Resolved at compile time (static polymorphism).","Can be applied to constructors as well.","Defining multiple functions with the same name but different parameters.",10
"What is operator overloading in C++?","Allows custom implementation of operators for user-defined types.","Enables intuitive usage of objects with operators like +, -, *, etc.","Must be defined as a member or friend function.","Cannot overload certain operators like ::, .*, sizeof, and ?:.","Enhances code clarity when used appropriately.","Changing the scope of the action of the operator for different objects.",8
"What is inheritance in C++?","Mechanism for creating a new class from an existing class.","Promotes code reusability and logical hierarchy.","Supports single, multiple, multilevel, and hybrid inheritance.","Derived class inherits members of the base class.","Access specifiers (public, protected, private) control inheritance visibility.","This is mechanism applicable with different types. A new class is created and containing the old class in its memory but only inherited public or protected data are accessible for the derived class.",10
"What is a constructor in C++?","A special member function invoked during object creation.","Initializes object members.","Can be overloaded to provide multiple initialization options.","If not defined, the compiler provides a default constructor.","Cannot return a value.","Function returning object from its class type",10
"What is a destructor in C++?","A special member function invoked during object destruction.","Cleans up resources allocated by the object.","Has the same name as the class, preceded by a tilde (~).","Cannot be overloaded.","Called automatically when an object goes out of scope or is deleted.","Freeing up an object's memory after its death in the scope",9
"What is polymorphism in C++?","The ability of a function or object to behave differently based on context.","Achieved through function overloading (compile-time) and virtual functions (runtime).","Enhances flexibility and maintainability of code.","Allows for dynamic method binding.","Facilitates the implementation of interfaces and abstract classes.","Different behavior of the code based on the type",6
"What is encapsulation in C++?","Bundling data and functions that operate on the data into a single unit (class).","Restricts direct access to some of an object's components.","Achieved using access specifiers (private, protected, public).","Enhances data security and integrity.","Simplifies maintenance and reduces complexity.","Creating encapsulation of the data like the best OOP practices",1
"What is abstraction in C++?","Hiding complex implementation details and showing only essential features.","Implemented using abstract classes and interfaces.","Helps in managing complexity by focusing on relevant data.","Promotes modularity and code reusability.","Facilitates the design of scalable systems.","Implementing things from the world with simple use and in understandable way hiding not needed details.",7
"What is the Standard Template Library (STL) in C++?","A collection of template classes and functions for common data structures and algorithms.","Includes containers like vector, list, map, etc.","Provides generic algorithms like sort(), find(), accumulate(), etc.","Utilizes iterators to navigate through container elements.","Enhances productivity by reducing the need to write common code from scratch.","Set of functionalities used worldwide",5
"What is the difference between public, private, and protected access specifiers?","public: Members are accessible from anywhere.","private: Members are accessible only within the class.","protected: Members are accessible within the class and its derived classes.","Control access to class members to enforce encapsulation.","Default access specifier for classes is private; for structs, it's public.","Nothing, they are the same",0
"What is a template in C++?","Allows functions and classes to operate with generic types.","Enables code reusability for different data types.","Defined using the template keyword.","Can be specialized for specific data types.","Forms the basis for the Standard Template Library (STL).","Kind of polymorphism",4
"What is exception handling in C++?","Mechanism to handle runtime errors gracefully.","Uses try, catch, and throw keywords.","Prevents program termination due to unexpected errors.","Supports custom exception classes.","Enhances code robustness and reliability.","Catching runtime errors gracefully",10
"What is the difference between shallow copy and deep copy in C++?","Shallow copy duplicates object references; deep copy duplicates actual objects.","Shallow copy may lead to shared resources and unintended side effects.","Deep copy ensures independent copies with separate memory allocations.","Deep copy requires explicit implementation, especially for dynamic memory.","Deep copy avoids problems like double deletion in destructors.","The first one is doing a fake copy and the second one is copying actually the object",6
"What is the difference between stack and heap memory in C++?","Stack is used for static memory allocation; heap is for dynamic memory.","Stack memory is automatically managed; heap memory must be manually allocated and deallocated.","Stack is faster and smaller; heap is larger but slower.","Stack variables are destroyed when function ends; heap variables persist until explicitly freed.","new and delete are used with heap; stack uses normal variable declarations.","The speed of allocating and releasing it",7
"What is the use of const keyword in C++?","It makes a variable’s value unchangeable after initialization.","It can be used to protect function parameters from modification.","It allows defining read-only pointers or data members.","const methods prevent modification of class data.","Helps in improving program safety and compiler optimization.","Making variable unchangeable and function parameters also",8
